// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gameapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameInfoClient is the client API for GameInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameInfoClient interface {
	MonsterAttack(ctx context.Context, in *MonsterAction, opts ...grpc.CallOption) (*HealthPoints, error)
	GetHealthPoints(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthPoints, error)
	GetGameInfo(ctx context.Context, in *RequestInfo, opts ...grpc.CallOption) (*GameStatus, error)
}

type gameInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewGameInfoClient(cc grpc.ClientConnInterface) GameInfoClient {
	return &gameInfoClient{cc}
}

func (c *gameInfoClient) MonsterAttack(ctx context.Context, in *MonsterAction, opts ...grpc.CallOption) (*HealthPoints, error) {
	out := new(HealthPoints)
	err := c.cc.Invoke(ctx, "/gameapi.GameInfo/MonsterAttack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameInfoClient) GetHealthPoints(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthPoints, error) {
	out := new(HealthPoints)
	err := c.cc.Invoke(ctx, "/gameapi.GameInfo/GetHealthPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameInfoClient) GetGameInfo(ctx context.Context, in *RequestInfo, opts ...grpc.CallOption) (*GameStatus, error) {
	out := new(GameStatus)
	err := c.cc.Invoke(ctx, "/gameapi.GameInfo/GetGameInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameInfoServer is the server API for GameInfo service.
// All implementations must embed UnimplementedGameInfoServer
// for forward compatibility
type GameInfoServer interface {
	MonsterAttack(context.Context, *MonsterAction) (*HealthPoints, error)
	GetHealthPoints(context.Context, *HealthRequest) (*HealthPoints, error)
	GetGameInfo(context.Context, *RequestInfo) (*GameStatus, error)
	mustEmbedUnimplementedGameInfoServer()
}

// UnimplementedGameInfoServer must be embedded to have forward compatible implementations.
type UnimplementedGameInfoServer struct {
}

func (UnimplementedGameInfoServer) MonsterAttack(context.Context, *MonsterAction) (*HealthPoints, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonsterAttack not implemented")
}
func (UnimplementedGameInfoServer) GetHealthPoints(context.Context, *HealthRequest) (*HealthPoints, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealthPoints not implemented")
}
func (UnimplementedGameInfoServer) GetGameInfo(context.Context, *RequestInfo) (*GameStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameInfo not implemented")
}
func (UnimplementedGameInfoServer) mustEmbedUnimplementedGameInfoServer() {}

// UnsafeGameInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameInfoServer will
// result in compilation errors.
type UnsafeGameInfoServer interface {
	mustEmbedUnimplementedGameInfoServer()
}

func RegisterGameInfoServer(s grpc.ServiceRegistrar, srv GameInfoServer) {
	s.RegisterService(&GameInfo_ServiceDesc, srv)
}

func _GameInfo_MonsterAttack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonsterAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameInfoServer).MonsterAttack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gameapi.GameInfo/MonsterAttack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameInfoServer).MonsterAttack(ctx, req.(*MonsterAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameInfo_GetHealthPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameInfoServer).GetHealthPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gameapi.GameInfo/GetHealthPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameInfoServer).GetHealthPoints(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameInfo_GetGameInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameInfoServer).GetGameInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gameapi.GameInfo/GetGameInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameInfoServer).GetGameInfo(ctx, req.(*RequestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// GameInfo_ServiceDesc is the grpc.ServiceDesc for GameInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gameapi.GameInfo",
	HandlerType: (*GameInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MonsterAttack",
			Handler:    _GameInfo_MonsterAttack_Handler,
		},
		{
			MethodName: "GetHealthPoints",
			Handler:    _GameInfo_GetHealthPoints_Handler,
		},
		{
			MethodName: "GetGameInfo",
			Handler:    _GameInfo_GetGameInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gameapi/gameapi.proto",
}
