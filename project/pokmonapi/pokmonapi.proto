// Proto file for movie info service. Note this is gRPC proto syntax (not Go)
syntax = "proto3";

option go_package = "project/pokmonapi";

package pokmonapi;

service PokmonInfo {
	rpc GetMonsterInfo (MonsterName) returns (MonsterNames) {}        // user retrieving monsters from database
	rpc SetMonsterInfo (UserAndName) returns (Status) {}              // user setting up team by adding monsters
	rpc JoinQueue (UserName) returns (Status) {}                      // user says their ready to play
	//rpc LeaveQueue (UserName) returns (Status) {}                     // user wants to leave the queue because they scared 
	rpc LeaveGame (UserName) returns (Status) {}                      // user wants to leave game *(might not need this)*
	rpc SetUserName (UserName) returns (Status) {}                    // user set/sends name to server
	//rpc SetCredentials (Credentials) returns (Status) {}              // user sets Credentials to server *(this is extra)* //uncomment credentials lne 47
	rpc GetGameInfo (RequestInfo) returns (GameStatus) {}             // user requests opponent's name, monster, hp
	rpc GetActionInfo (RequestInfo) returns (AttackActions) {}        // user needs this to know attack options for monster
}

// The request message containing ONE monster name
message MonsterName {
	string monster = 1;
}

// The reply message containing multiple monster names
message MonsterNames {
	repeated string monsters = 1;
}

// The request message containing username and monster name
message UserAndName {
	string name = 1;
	string monster = 2;
}

// The message for setting UserName
message UserName {
	string name = 1;
}

// The message for logginging in
/*message Credentials {
	string name = 1;
	string password = 2;
}*/

message GameStatus {
	string opponentName = 1;
	string opponentMonster = 2;
	int32  opponentHealth = 3;
	string whoseTurn = 4;
	int32 myHealth = 5;
	string myMonster = 6;
	string code = 7;         // Game Status
	string gameID = 8;	
	int32 gamePort = 9;
}

message RequestInfo {
	string name = 1;
}

message AttackActions {
	repeated string actions = 1;
}

message Status {
	string code = 1;
}